-> Users and User Authentication Lesson: Flask Security with Hashed Passwords
    -> Learn about password security with hashed passwords for protecting user information
    -> The lesson covers securing passwords and preventing unauthorized access through authentication
    -> Users’ passwords are at risk of being stolen, so it's crucial to protect them properly
    -> The focus is on using hashing techniques to ensure passwords are stored securely without revealing their content
    -> Learn the importance of keeping passwords safe from attackers
    -> Attackers often exploit reused passwords across multiple websites to steal information
    -> Store passwords in a hashed format to avoid storing plain-text passwords that can be easily compromised

-> Protecting Users' Information from Attackers
    -> Many users reuse passwords across websites, making them vulnerable to hacking
    -> Users like your family or friends may not understand the risks of poor password security
    -> You need to protect their data by storing passwords in a secure, non-readable format
    -> If a website is hacked, storing passwords securely prevents attackers from gaining access to sensitive data
    -> Storing hashed passwords, instead of plain-text passwords, ensures the data is protected even if attackers breach the system

-> What are Hashed Passwords?
    -> Hashed passwords are the result of a password passed through a hashing function, altered with salt for security
    -> Hashing makes the password unrecognizable and hard to reverse-engineer
    -> Salt is used to add randomness to the hashing process, preventing attackers from using precomputed hash databases (rainbow tables)
    -> While recovering the original password from the hash is difficult, it’s possible with the correct hashing function and salt
    -> Hashing is a complex process that is made easier with the help of libraries like Werkzeug

-> Give Password Hashing a Spin
    -> Werkzeug is a library that handles password hashing and verification for you
    -> The `generate_password_hash()` function hashes a password using a hashing method and salt
    -> You can modify the hashing method or salt length, but the default is usually sufficient
    -> The `check_password_hash()` function checks if the hash matches a given password, helping verify user credentials
    -> These functions simplify the implementation of secure password storage and verification in your application

-> Adding Changes to the User Model
    -> To incorporate password hashing into your app, you modify your user model by adding a hashed password column
    -> The `password` property should not be accessible directly, protecting the password field from being exposed
    -> A setter function is used to hash the password before storing it in the database
    -> The `verify_password()` method checks if the entered password matches the hashed password stored in the database
    -> This approach ensures that users' passwords remain secure and are never stored as plain text

-> Hashed Passwords with Flask Shell
    -> You can test password hashing using Flask Shell, a convenient way to interact with your app's data
    -> When trying to access a user's password directly, an error is raised, ensuring the password isn't exposed
    -> Different password hashes are generated even for identical passwords due to the added salt, improving security
    -> Unit tests can be written to check if the password hashing functionality is working correctly
    -> Test scenarios include verifying that hashes are different for the same password, ensuring the password validation is secure

-> Summary: Flask Security with Hashed Passwords
    -> You learned the importance of securing user passwords, especially given the risk of password reuse across sites
    -> Instead of storing plain text passwords, you store their hashed versions for added security
    -> The hashing process uses a function and salt to make the original password nearly impossible to recover
    -> You explored the Werkzeug library's password hashing functions, `generate_password_hash()` and `check_password_hash()`
    -> You implemented hashed passwords in your app's user model and tested the functionality in Flask Shell
    -> These steps are fundamental in securing user authentication in web applications
